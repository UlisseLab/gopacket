name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  PACKAGES: ./ ./layers ./tcpassembly ./reassembly ./pcapgo ./pcap ./routing

jobs:
  test:
    name: Test (${{ matrix.go }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go: [1.23.x, 1.24.x, "1.x", "1.25.0-rc.1"]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Install dependencies (libpcap-dev)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      - name: Run tests
        run: |
          set -ev
          go test ${{ env.PACKAGES }} -v -coverprofile=coverage.out -covermode=atomic

          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo $(which go) test ./routing
          fi

  style:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies (libpcap-dev)
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.x"

      - name: Run gofmt
        run: |
          if [ -n "$(go fmt ${{ env.PACKAGES }})" ]; then
            echo "Go code is not formatted, run 'go fmt ./...'" >&2
            exit 1
          fi

      - name: Run govet
        run: |
          if [ -n "$(go vet ${{ env.PACKAGES }})" ]; then
            echo "Go code has vet errors, run 'go vet ./...'" >&2
            exit 1
          fi

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest
      - name: Run golint
        run: |
          if [ -n "$(golint ${{ env.PACKAGES }})" ]; then
            echo "Go code has lint errors, run 'golint ./...'" >&2
            exit 1
          fi
